apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.cloud.tools.endpoints-framework-client'
apply plugin: 'io.fabric'

android {
    compileSdkVersion versions.compileSdk

    useLibrary 'android.test.base'

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "TVDB_API_KEY", propertyOrEmpty("SG_TVDB_API_KEY"))
        buildConfigField("String", "TMDB_API_KEY", propertyOrEmpty("SG_TMDB_API_KEY"))
        buildConfigField("String", "TRAKT_CLIENT_ID", propertyOrEmpty("SG_TRAKT_CLIENT_ID"))
        buildConfigField("String", "TRAKT_CLIENT_SECRET", propertyOrEmpty("SG_TRAKT_CLIENT_SECRET"))
        buildConfigField("String", "IMAGE_CACHE_URL", propertyOrNull("SG_IMAGE_CACHE_URL"))
        buildConfigField("String", "IMAGE_CACHE_SECRET", propertyOrEmpty("SG_IMAGE_CACHE_SECRET"))

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "eventBusIndex" : "com.battlelancer.seriesguide.SgEventBusIndex",
                        "room.schemaLocation": "$projectDir/schemas".toString()
                ]
            }
        }
    }

    sourceSets {
        androidTest {
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    lintOptions {
        // for CI server: only check this module with dependencies instead of each module separately
        checkDependencies true
        // for CI server: log reports (report files are not public)
        textReport true
        textOutput 'stdout'
    }

    packagingOptions {
        exclude '/firebase-*.properties'
        exclude '/play-services-*.properties'
        exclude '/META-INF/proguard/*.pro'
        // exclude Kotlin files only required for reflection
        exclude '**/*.kotlin_builtins'
        exclude '**/*.kotlin_metadata'
        exclude '**/*.kotlin_module'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    flavorDimensions "flavor"

    productFlavors {
        pure {
            applicationId "com.battlelancer.seriesguide"
            versionCode versions.code
            versionName versions.name

            manifestPlaceholders = [
                    androidBackupKey: rootProject.hasProperty("SG_ANDROID_BACKUP_KEY")
                            ? rootProject.property("SG_ANDROID_BACKUP_KEY") : "MISSING"
            ]
        }
        amazon {
            applicationId "com.uwetrottmann.seriesguide.amzn"
            versionCode versions.code
            versionName versions.name
        }
    }

    signingConfigs {
        release {
            if(rootProject.file('keystore.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(rootProject.file('keystore.properties')))

                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            if (isCiBuild) {
                ext.enableCrashlytics = false
            }

            multiDexEnabled false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if(rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            if (!rootProject.file('app/fabric.properties').exists()) {
                ext.enableCrashlytics = false
            }

            multiDexEnabled true
            // disable shrinking to use incremental dex in builds
            minifyEnabled false
            // en_XA (LTR) and ar_XB (RTL) to test UI adjusting to unusual glyphs and long strings
            // keep disabled unless needed, slows down build
            pseudoLocalesEnabled false
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation project(':api')
    implementation project(':billing')
    implementation project(':common')
    implementation project(':customtabs')
    implementation project(':tmdb-api')
    implementation project(':widgets')

    implementation "androidx.core:core:${versions.core}"
    implementation "androidx.core:core-ktx:${versions.core}"
    implementation "androidx.annotation:annotation:${versions.annotation}"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.fragment:fragment-ktx:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference:1.1.0'

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    // Paging
    implementation "androidx.paging:paging-runtime-ktx:${versions.paging}"

    // Room
    implementation "androidx.room:room-runtime:${versions.room}"
    kapt "androidx.room:room-compiler:${versions.room}"

    implementation "com.jakewharton:butterknife:${versions.butterknife}"
    kapt "com.jakewharton:butterknife-compiler:${versions.butterknife}"
    implementation "com.google.dagger:dagger:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    implementation 'org.greenrobot:eventbus:3.1.1'
    kapt 'org.greenrobot:eventbus-annotation-processor:3.1.1'

    implementation 'com.google.flatbuffers:flatbuffers-java:1.10.0'
    implementation "com.google.code.gson:gson:${versions.gson}"
    // github.com/JakeWharton/ThreeTenABP/blob/master/CHANGELOG.md
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'
    // make sure to update TZDB.dat as well (see SgApp), ensure compat with ThreeTenABP
    implementation group: 'org.threeten', name: 'threetenbp', version: '1.4.0', classifier: 'no-tzdb'
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation 'com.readystatesoftware.systembartint:systembartint:1.0.4'

    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation 'com.squareup.picasso:picasso:2.71828'

    implementation ("com.uwetrottmann.androidutils:androidutils:${versions.androidUtils}") {
        exclude group: 'com.android.support'
    }
    implementation 'com.uwetrottmann.photoview:library:1.2.4'
    implementation "com.uwetrottmann.thetvdb-java:thetvdb-java:${versions.thetvdb}"
    implementation ("com.uwetrottmann.trakt5:trakt-java:${versions.trakt}") {
        exclude group: 'org.threeten', module: 'threetenbp' // using ThreeTenABP instead
    }

    // https://github.com/lenguyenthanh/DebugDrawer
    def debugDrawerVersion = "0.9.0"
    implementation "com.github.lenguyenthanh.debugdrawer:debugdrawer-base:$debugDrawerVersion"
    implementation "com.github.lenguyenthanh.debugdrawer:debugdrawer-view:$debugDrawerVersion"
    implementation "com.github.lenguyenthanh.debugdrawer:debugdrawer-commons:$debugDrawerVersion"
    implementation "com.github.lenguyenthanh.debugdrawer:debugdrawer-actions:$debugDrawerVersion"
    implementation "com.github.lenguyenthanh.debugdrawer:debugdrawer-timber:$debugDrawerVersion"

    // Crashlytics
    implementation("com.crashlytics.sdk.android:crashlytics:${versions.crashlytics}@aar") {
        transitive = true
    }

    // Google Play Services
    // https://developers.google.com/android/guides/releases
    implementation "com.google.android.gms:play-services-auth:17.0.0"

    // App Engine
    // https://github.com/googleapis/google-api-java-client/releases
    implementation('com.google.api-client:google-api-client-android:1.30.5') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient' // unused
        exclude group: 'org.checkerframework' // from guava, not needed at runtime
        exclude group: 'com.google.errorprone' // from guava, not needed at runtime
    }

    // Amazon flavor specific
    amazonImplementation files('libs/amazon/in-app-purchasing-2.0.76.jar')

    // Instrumented unit tests
    // https://developer.android.com/training/testing/release-notes
    androidTestImplementation "androidx.annotation:annotation:${versions.annotation}"
    // Core library
    androidTestImplementation 'androidx.test:core:1.2.0'
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    // Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation ('androidx.test.ext:truth:1.2.0') {
        exclude group: 'com.google.truth' // include manually to control conflicting deps
    }
    androidTestImplementation ("com.google.truth:truth:${versions.truth}") {
        exclude group: 'org.checkerframework' // from guava, not needed at runtime
        exclude group: 'com.google.errorprone' // from guava, not needed at runtime
    }
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    kaptAndroidTest "com.google.dagger:dagger-compiler:${versions.dagger}"
    androidTestImplementation "androidx.room:room-testing:${versions.room}"

    // Local unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation "androidx.annotation:annotation:${versions.annotation}"
    testImplementation("com.google.truth:truth:${versions.truth}") {
        exclude group: 'org.checkerframework' // from guava, not needed at runtime
        exclude group: 'com.google.errorprone' // from guava, not needed at runtime
    }
    testImplementation 'org.robolectric:robolectric:4.3'

}

endpointsClient {
    discoveryDocs = ['src/endpoints/account-v2-rest.discovery',
                     'src/endpoints/episodes-v2-rest.discovery',
                     'src/endpoints/lists-v2-rest.discovery',
                     'src/endpoints/movies-v2-rest.discovery',
                     'src/endpoints/shows-v2-rest.discovery']
}

def propertyOrEmpty(String name) {
    return rootProject.hasProperty(name) ? "\"${rootProject.property(name)}\"" : "\"\""
}

def propertyOrNull(String name) {
    return rootProject.hasProperty(name) ? "\"${rootProject.property(name)}\"" : "null"
}
